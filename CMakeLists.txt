cmake_minimum_required(VERSION 3.21)
project(tinytris C)
set(CMAKE_C_STANDARD 23)
add_executable(tinytris src/main.c src/stb_vorbis.c src/sha1.c src/ini.c)
if(WIN32)
    set_property(TARGET tinytris PROPERTY WIN32_EXECUTABLE TRUE)
    target_sources(tinytris PRIVATE assets/icon.rc)
endif()

include(CheckCSourceCompiles)
set(LIBM_TEST_SOURCE "#include <math.h>\nfloat f = 0.0f; int main() { sqrt(f); return 0; }")
check_c_source_compiles("${LIBM_TEST_SOURCE}" HAVE_MATH)
if(NOT HAVE_MATH)
    set(CMAKE_REQUIRED_LIBRARIES m)
    check_c_source_compiles("${LIBM_TEST_SOURCE}" HAVE_LIBM_MATH)
    if(NOT HAVE_LIBM_MATH)
        message(FATAL_ERROR "Unable to use C math library functions")
    endif()
    target_link_libraries(tinytris PRIVATE m)
endif()

option(TINYTRIS_VENDORED "Use vendored libraries" OFF)

if(TINYTRIS_VENDORED)
    add_subdirectory(vendored/SDL)
    add_subdirectory(vendored/SDL_image)
else()
    find_package(SDL3 CONFIG REQUIRED)
    find_package(SDL3_image CONFIG REQUIRED)
endif()

target_link_libraries(tinytris PRIVATE SDL3::SDL3)
target_link_libraries(tinytris PRIVATE $<IF:$<TARGET_EXISTS:SDL3_image::SDL3_image-shared>,SDL3_image::SDL3_image-shared,SDL3_image::SDL3_image-static>)

file(GLOB INCLUDE_IN_BUILD *.ini *.template *.md LICENSE-inih LICENSE-tinytris LICENSE-sha1)
file(COPY ${INCLUDE_IN_BUILD} DESTINATION ${PROJECT_BINARY_DIR})